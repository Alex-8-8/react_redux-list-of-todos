{"version":3,"sources":["components/Todo/Todo.tsx","constants.ts","components/TodoList/TodoList.tsx","api.ts","App.tsx","store.ts","index.tsx"],"names":["connect","dispatch","onDelete","id","type","payload","todo","user","username","title","completed","onClick","state","todos","sortByTitle","sortByName","sortByCompleted","className","map","item","key","API_URL","getData","url","a","fetch","response","json","getUsers","getTodos","getPreparedTodos","users","preparedTodos","find","userId","setTodos","useState","isLoaded","setLoad","isLoading","setLoading","then","newTodos","initialState","store","createStore","action","sort","b","Number","localeCompare","todoA","todoB","filter","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc25aaf6.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { ON_DELETE } from '../../constants';\n\ninterface Props {\n  todo: PreparedTodo;\n  onDelete: (id: number) => void;\n}\n\nconst Todo: FC<Props> = ({ todo, onDelete }) => (\n  <tr>\n    <td>{todo.user.username}</td>\n    <td>{todo.title}</td>\n    <td>{todo.completed ? 'completed' : 'uncompleted'}</td>\n    <td>\n      <button\n        type=\"button\"\n        onClick={() => onDelete(todo.id)}\n      >\n        x\n      </button>\n    </td>\n  </tr>\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onDelete: (id: number) => dispatch({\n    type: ON_DELETE,\n    payload: id,\n  }),\n});\n\nexport default connect(null, mapDispatchToProps)(Todo);\n","export const SORT_BY_NAME = 'SORT_BY_NAME';\nexport const SORT_BY_TITLE = 'SORT_BY_TITLE';\nexport const SORT_BY_COMPLETED = 'SORT_BY_COMPLETED';\nexport const SET_TODOS = 'SET_TODOS';\nexport const ON_DELETE = 'ON_DELETE';\n","import React, { FC, Dispatch } from 'react';\nimport { connect } from 'react-redux';\nimport { Action } from 'redux';\nimport Todo from '../Todo/Todo';\nimport { InitialState } from '../../store';\nimport {\n  SORT_BY_COMPLETED,\n  SORT_BY_TITLE,\n  SORT_BY_NAME,\n} from '../../constants';\n\n\ninterface Props {\n  todos: PreparedTodo[];\n  sortByTitle: () => void;\n  sortByName: () => void;\n  sortByCompleted: () => void;\n}\n\nconst TodoList: FC<Props> = ({\n  todos,\n  sortByTitle,\n  sortByName,\n  sortByCompleted,\n}) => {\n  return (\n    <div className=\"table-wrapper\">\n      <table className=\"table table-striped w-100 w-50\">\n        <thead className=\"thead-dark\">\n          <tr>\n            <th>\n              <button\n                className=\"btn btn-info\"\n                type=\"button\"\n                onClick={() => sortByName()}\n              >\n                Name\n              </button>\n            </th>\n            <th>\n              <button\n                className=\"btn btn-info\"\n                type=\"button\"\n                onClick={() => sortByTitle()}\n              >\n                Todo\n              </button>\n            </th>\n            <th>\n              <button\n                className=\"btn btn-info\"\n                type=\"button\"\n                onClick={() => sortByCompleted()}\n              >\n                Status\n              </button>\n            </th>\n            <th>\n              Delete\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map(item => <Todo key={item.id} todo={item} />)}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: InitialState) => ({\n  todos: state.todos,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n  sortByTitle: () => dispatch({\n    type: SORT_BY_TITLE,\n  }),\n  sortByName: () => dispatch({\n    type: SORT_BY_NAME,\n  }),\n  sortByCompleted: () => dispatch({\n    type: SORT_BY_COMPLETED,\n  }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","const API_URL = 'https://jsonplaceholder.typicode.com';\n\nconst getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nconst getUsers = async (): Promise<User[]> => {\n  return getData<User[]>(`${API_URL}/users`);\n};\n\nconst getTodos = async (): Promise<Todo[]> => {\n  return getData<Todo[]>(`${API_URL}/todos`);\n};\n\nexport const getPreparedTodos = async (): Promise<PreparedTodo[]> => {\n  const todos: Todo[] = await getTodos();\n  const users: User[] = await getUsers();\n\n  const preparedTodos = todos.map((todo) => ({\n    ...todo,\n    user: users.find(user => todo.userId === user.id) as User,\n  }));\n\n  return preparedTodos;\n};\n","import React, { FC, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport './App.css';\nimport TodoList from './components/TodoList/TodoList';\nimport { getPreparedTodos } from './api';\nimport { SET_TODOS } from './constants';\n\ninterface Props {\n  setTodos: (todos: PreparedTodo[]) => void;\n}\n\nconst App: FC<Props> = ({ setTodos }) => {\n  const [isLoaded, setLoad] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const handleLoad = () => {\n    setLoading(true);\n    getPreparedTodos().then(newTodos => {\n      setTodos(newTodos);\n      setLoad(true);\n      setLoading(false);\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      {isLoaded\n        ? (\n          <TodoList />\n        )\n        : (\n          <div className=\"primary-show\">\n            <h1>Redux TODOs</h1>\n            <button\n              className=\"btn btn-warning btn-lg\"\n              type=\"button\"\n              onClick={handleLoad}\n            >\n              {!isLoading ? <span>Load</span> : <span>Loading...</span>}\n            </button>\n          </div>\n        )}\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setTodos: (todos: PreparedTodo[]) => dispatch({\n    type: SET_TODOS,\n    todos,\n  }),\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","import {\n  createStore,\n  Reducer,\n  Action,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {\n  SET_TODOS,\n  SORT_BY_COMPLETED,\n  SORT_BY_TITLE,\n  SORT_BY_NAME,\n  ON_DELETE,\n} from './constants';\n\nexport interface InitialState {\n  todos: PreparedTodo[] | [];\n}\n\nexport interface DispatchAction extends Action {\n  type: string;\n  todos: PreparedTodo[];\n  payload?: number;\n}\n\nconst initialState: InitialState = {\n  todos: [],\n};\n\nconst reducer: Reducer<InitialState, DispatchAction> = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n\n    case SORT_BY_COMPLETED:\n      return {\n        ...state,\n        todos: [...state?.todos]\n          .sort((a, b) => Number(b.completed) - Number(a.completed)),\n      };\n\n    case SORT_BY_TITLE:\n      return {\n        ...state,\n        todos: [...state?.todos].sort((a, b) => a.title.localeCompare(b.title)),\n      };\n\n    case SORT_BY_NAME:\n      return {\n        ...state,\n        todos: [...state?.todos]\n          .sort((todoA, todoB) => todoA.user.username\n            .localeCompare(todoB.user.username)),\n      };\n\n    case ON_DELETE:\n      return {\n        ...state,\n        todos: [...state?.todos].filter(todo => todo.id !== action.payload),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(\n  reducer,\n  composeWithDevTools(),\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}